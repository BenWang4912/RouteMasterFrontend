@{
    int cartIdFromCookie = int.Parse(Context.Request.Cookies["CartId"] ?? "0");
}



@section Styles{
    <style>
 
        .initialHeight{
            height:50px;
        }


        .travelComponent {
            display: flex;
            flex-direction: column;
            gap: 10px; 
            padding: 10px;           
          
            border-radius: 10px;
            justify-content:center;
            align-items:center;
        

        }

     

        .draggable {
            width: 100px;
            height: 50px;
            background-color: lightblue;
            border-radius:20px;
            margin: 10px;
            text-align: center;
            line-height: 50px;
            cursor: pointer;
        }

        .custom-arrow {
           
            transform: scaleY(3); 
        }

        .attractionDropContainer{
            width:50%;
            border: 1px solid #000;
            text-align:center;
            padding: 5px;
            border-radius: 5px;
        }

        #selectedAttractions{
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            max-height: 500px; 
            overflow: auto; 
        }

        .hide{
            display:none
        }
    
    </style>
}

<hr />
<div id="AttractionListContainer">
    @await Component.InvokeAsync("SelectAttraction")
</div>
<hr />




<div class="row" style="min-height: 500px; height: auto;">
    
    <div class="col-6 border border-primary p-3 " style="min-height: 500px; height: auto;" id="schedule">
        <input type="datetime-local"  id="travelBeginDateTime" />
        <button id="createAttractionTimeSpanContainer" >新增區塊</button>
        <button id="callApiToAddToCart" >加入購物車</button>
        <div class="row">            
            <div id="dropZoneContainer" class="col-6">

            </div>
            <div id="tableContainer" class="col-6 hide">
                <table>
                    <thead>
                        <tr>
                            <th>事項</th>
                            <th>景點名稱</th>
                            <th>開始時間</th>
                            <th>結束時間</th>
                        </tr>
                    </thead>
                    <tbody id="ajaxUpdateSchedule">
                    </tbody>
                </table>
            </div>
        </div>       
    </div>


    <div class="col-3" style="position:relative;">
        <div id="sortedAttractions" class="border border-primary" style="height:500px"></div>
        <button id="greedyTSP" style="position: absolute; bottom: -50px; left: 50%; transform: translateX(-50%);">推薦路線</button>
    </div>

    <di class="col-3" style="position:relative;">
        <div id="selectedAttractions" class="border border-primary " style="height:500px; position:relative;"></div>
        <button id="getInformations" style="position: absolute; bottom: -50px; left: 50%; transform: translateX(-50%);">取得距離資料</button>
    </di>    
</div>






@section Scripts {
    <script src="https://unpkg.com/vue@3.2.36/dist/vue.global.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"
            integrity="sha512-uMtXmF28A2Ab/JJO2t/vYhlaa/3ahUOgj1Zf27M5rOo8/+fcTUVH0/E0ll68njmjrLqOBjXM3V9NiPFL5ywWPQ=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  

    <script>

        let selectedAttraction = [];
        let coordinatesArray = [];
        let allData = [];
        let greedyResult = [];
        let attContainer = document.querySelector('#selectedAttractions');
        let visited = [];
        let selectedPath = [];
        const addAttBtns = document.querySelectorAll('.addAtt');



        function handleDoubleClick() {
            const id = this.id;
            const index = selectedAttraction.findIndex((element) => element.Id == id);
            if (index !== -1) {
                selectedAttraction.splice(index, 1);
                coordinatesArray.splice(index, 1);
            }
            this.remove();
        }





        for (let i = 0; i < addAttBtns.length; i++) {
            addAttBtns[i].addEventListener('click', function () {
                const positionX = this.getAttribute('data-positionX');
                const positionY = this.getAttribute('data-positionY');
                coordinatesArray.push({ lat: parseFloat(positionX), lng: parseFloat(positionY) });

                const attractionId = this.getAttribute('data-id');
                const attractionName = this.getAttribute('data-name');
                selectedAttraction.push({ Id: attractionId, Name: attractionName });

                const newAtt = document.createElement('div');
                newAtt.addEventListener('dblclick', handleDoubleClick)
                newAtt.textContent = attractionName;
                newAtt.classList.add('m-3', 'rounded', 'text-center', 'w-50', 'p-3');
                newAtt.id = attractionId;
                newAtt.style.border = '1px solid #000';
                newAtt.style.left='50%';
                attContainer.appendChild(newAtt);
            });
        }















        function getTravelInformations() {
            axios.get('https://localhost:7251/api/TravelPlans')
                .then(function (response) {
                    const informations = response.data;
                    for(let i=0;i<informations.length;i++){
                        const startId = informations[i].start.id;
                        const endId = informations[i].end.id;
                        const startObj = selectedAttraction.find(item => item.Id == startId);
                        const endObj = selectedAttraction.find(item => item.Id == endId);


                        allData.push({
                            start: startObj,
                            end: endObj,
                            distance: informations[i].distance,
                            duration: informations[i].duration                         
                        })
                    }          
                })
                .catch(function (error) {
                    console.error('Error fetching travel plans:', error);
                });
        }




        function getShortestDistanceObject(distanceToEach) {
            if (distanceToEach.length === 0) {
                return undefined;
            }
            let shortestDistanceObject = distanceToEach[0];
            let shortestDistance = shortestDistanceObject.distance.value;

            for (let i = 1; i < distanceToEach.length; i++) {
                const currentObject = distanceToEach[i];
                const currentDistance = currentObject.distance.value;

                if (currentDistance < shortestDistance) {
                    shortestDistanceObject = currentObject;
                    shortestDistance = currentDistance;
                }
            }
            return shortestDistanceObject;
        }


        function getNextDistanceObject(distanceToEach, startPoint, visited) {
            if (distanceToEach.length === 0) {
                return undefined;
            }

            const objectsWithStartingPoint = distanceToEach.filter(obj => obj.start == startPoint);

            if (objectsWithStartingPoint.length == 0) {
                return undefined;
            }

            // Filter out objects whose destinations are already in "visited" array
            const unvisitedObjects = objectsWithStartingPoint.filter(obj => !visited.includes(obj.end));

            if (unvisitedObjects.length === 0) {
                return undefined;
            }

            let shortestDistanceObject = unvisitedObjects[0];
            let shortestDistance = shortestDistanceObject.distance.value;

            for (let i = 1; i < unvisitedObjects.length; i++) {
                const currentObject = unvisitedObjects[i];
                const currentDistance = currentObject.distance.value;

                if (currentDistance < shortestDistance) {
                    shortestDistanceObject = currentObject;
                    shortestDistance = currentDistance;
                }
            }
            return shortestDistanceObject;
        }
      


        document.querySelector("#getInformations").addEventListener('click',function(){
            getTravelInformations();
            console.log(allData);
            console.log(selectedAttraction)
        })




        function drag(event) {
            event.dataTransfer.setData("text", event.target.getAttribute("data-id"));
        }

        function drop(event) {
            event.preventDefault();
            let dataId = event.dataTransfer.getData("text"); 
            console.log(dataId);

            if (dataId) {
                const draggableElement = document.querySelector(`.draggable[data-id="${dataId}"]`);
                draggableElement.draggable = false;
                draggableElement.style.backgroundColor = "lightgray";

                axios.get(`https://localhost:7251/api/TravelPlans/${dataId}`,{
                    params:{
                        startDateTime: document.querySelector('#travelBeginDateTime').value

                    }

                }).then(response => {
                    console.log(response);
                    if (response.status == 200) {
                        let container=document.createElement('div');
                        if(response.data.activityProducts.length>0){
                           
                            for (let i = 0; i<response.data.activityProducts.length;i++){
                                let label=document.createElement('label');
                                let newActProduct=document.createElement('input');
                                newActProduct.type="checkbox";
                                newActProduct.id = 'activityProduct' + i;
                                newActProduct.name = 'activityProduct';
                                label.setAttribute('for', 'activityProduct' + i);
                                label.textContent = response.data.activityProducts[i].activityName;
                                label.appendChild(newActProduct);
                                label.classList.add('m-3');
                                newActProduct.value = response.data.activityProducts[i].id;                      
                                newActProduct.setAttribute('data-startTime', response.data.activityProducts[i].startTime);
                                newActProduct.setAttribute('data-endTime', response.data.activityProducts[i].endTime);
                                container.appendChild(label);
                            }
                        } else if (response.data.extraServiceProducts.length > 0) {
                           
                            for (let i = 0; i < response.data.extraServiceProducts.length; i++) {
                                let label = document.createElement('label');
                                let newExtProduct = document.createElement('input');
                                newExtProduct.type = "checkbox";
                                newExtProduct.id = 'extraServiceProduct' + i;
                                newExtProduct.name = 'extraServiceProduct';
                                label.setAttribute('for', 'extraServiceProduct' + i);
                                label.textContent = response.data.extraServiceProducts[i].extraServiceName;
                                label.appendChild(newExtProduct);
                                label.classList.add('m-3');
                                newExtProduct.value = response.data.extraServiceProducts[i].id;
                                container.appendChild(label);
                            }
                        }


                        
                        
                       this.textContent = response.data.attractionName
                       this.appendChild(container)
                        
                    }



                }).catch(error=>{
                    console.log('error')
                })
                
            }
        }

        function allowDrop(e){
            e.preventDefault();
        }




        document.querySelector("#greedyTSP").addEventListener('click',function(){
            let unvisited = selectedAttraction.slice();
            let distanceToEach = allData.filter(x => x.distance.value !== 0);
            let sortedContainer = document.querySelector('#sortedAttractions');
            let newStart;


            while (unvisited.length > 0) {     
                console.log(unvisited)

                if (unvisited.length == selectedAttraction.length) {
                    let shortestObj = getShortestDistanceObject(distanceToEach);
                    console.log(shortestObj)
                    selectedPath.push(shortestObj);
           

                    let startIndex = unvisited.indexOf(shortestObj.start);
                    if (startIndex !== -1) {
                        unvisited.splice(startIndex, 1);
                        visited.push(shortestObj.start);

                    }

                    let endIndex = unvisited.indexOf(shortestObj.end);
                    if (endIndex !== -1) {
                        unvisited.splice(endIndex, 1);
                        visited.push(shortestObj.end);
                    }



                    newStart = shortestObj.end;
                    console.log('第一次')
                } else {
                    let shortestObj = getNextDistanceObject(distanceToEach, newStart, visited)
                    selectedPath.push(shortestObj);
                    let startIndex = unvisited.indexOf(shortestObj.start);
                    if (startIndex !== -1) {
                        unvisited.splice(startIndex, 1);
                        visited.push(shortestObj.start);
                    }

                    let endIndex = unvisited.indexOf(shortestObj.end);
                    if (endIndex !== -1) {
                        unvisited.splice(endIndex, 1);
                        visited.push(shortestObj.end);
                    }

                    newStart = shortestObj.end;
                    console.log('第二次')
                }

                if (unvisited.length === 0) {
                    break;
                }
            }

            for (i = 0; i < selectedPath.length; i++) {

                let newPath = document.createElement('div');
                let departure = document.createElement('div');
                let distance = document.createElement('div');
                let duration = document.createElement('div');
                let destination = document.createElement('div');
                let arrow=document.createElement('img');
                let flexContainer=document.createElement('div');

                flexContainer.style.display="flex";


                arrow.src = "@Url.Content("~/SystemImages/downArrow.jpg")";
                arrow.style.width = "50px";
                arrow.style.height = "50px"; 
                

                
                departure.textContent = selectedPath[i].start.Name;
                departure.setAttribute('data-id', selectedPath[i].start.Id);
                departure.draggable=true;
                departure.addEventListener('dragstart',drag);
                departure.classList.add('draggable');



                distance.textContent = selectedPath[i].distance.text;
                distance.value = selectedPath[i].distance.value;
                distance.classList.add('border', 'rounded', 'm-3')

                duration.textContent = selectedPath[i].duration.text;
                duration.value = selectedPath[i].duration.value;
                duration.classList.add('border', 'rounded', 'm-3')



                destination.textContent = selectedPath[i].end.Name;
                destination.setAttribute('data-id', selectedPath[i].end.Id);
                destination.draggable = true;
                destination.addEventListener('dragstart', drag);
                destination.classList.add('draggable');

          

    
                if(i==0){
                    sortedContainer.appendChild(newPath);
                    newPath.appendChild(departure);
                    flexContainer.appendChild(arrow);
                    flexContainer.appendChild(distance);
                    flexContainer.appendChild(duration);
                    newPath.appendChild(flexContainer);
                    newPath.appendChild(destination);

                }else{
                    sortedContainer.appendChild(newPath);
                    flexContainer.appendChild(arrow);
                    flexContainer.appendChild(distance);
                    flexContainer.appendChild(duration);
                    newPath.appendChild(flexContainer);
                    newPath.appendChild(destination);
                }

            }
        })



        document.querySelector("#createAttractionTimeSpanContainer").addEventListener('click',function(){
            let travelComponent = document.createElement('div');
            travelComponent.classList.add('travelComponent');
            travelComponent.style.position="relative";

            let attractionName=document.createElement('div');
            
            attractionName.textContent="請拖入景點";
            attractionName.classList.add('attractionDropContainer');
            attractionName.addEventListener('drop', drop);
            attractionName.addEventListener('dragover',allowDrop);
            


            travelComponent.appendChild(attractionName); 

            
            let targetContainer = document.querySelector('#dropZoneContainer');
            targetContainer.appendChild(travelComponent);
        })



        function addToCartByCallWebApi(){
            let actProBoxes = document.querySelectorAll('input[name="activityProduct"]:checked');
            let actCheckboxValues = Array.from(actProBoxes).map(actProBox => parseInt(actProBox.value));

            let extProBoxes = document.querySelectorAll('input[name="extraServiceProduct"]:checked');
            let extCheckboxValues= Array.from(extProBoxes).map(extProBox=>parseInt(extProBox.value));





           let cartIdFromCookie=@cartIdFromCookie;


            //todo AccommodationProduct
            const postData={
                cartId: cartIdFromCookie,
                activityProductIds: actCheckboxValues,
                extraServiceProductIds:extCheckboxValues
            };




}
